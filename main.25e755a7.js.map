{"version":3,"sources":["scripts/main.js"],"names":["board","gameField","document","querySelector","startButton","gameScore","messageStart","messageLose","messageWin","cellsInRow","scoreCount","movesLeft","hasEmptyTile","some","row","includes","placeTiles","randomRow","Math","floor","random","randomCol","numb","setCells","loseTheGame","classList","remove","startTheGame","innerText","r","c","currentCell","rows","cells","num","value","add","replace","removeEmptyTiles","filter","slide","newRow","i","length","push","slideLeft","prevBoard","cloneBoard","isBoardEqual","slideRight","reverse","slideUp","column","newColumn","slideDown","boardCopy","map","slice","board1","board2","addEventListener","e","preventDefault","code"],"mappings":"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","file":"main.25e755a7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst startButton = document.querySelector('.button');\nconst gameScore = document.querySelector('.game-score');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\n\nconst cellsInRow = 4;\nlet scoreCount = 0;\nlet board;\n\nlet movesLeft = true;\n\nstartButton.addEventListener('click', () => {\n  startButton.classList.replace('start', 'restart');\n  startButton.innerText = 'Restart';\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  startTheGame();\n});\n\nfunction hasEmptyTile() {\n  return board.some(row => row.includes(0));\n}\n\nfunction placeTiles() {\n  if (movesLeft) {\n    while (hasEmptyTile()) {\n      const randomRow = Math.floor(Math.random() * cellsInRow);\n      const randomCol = Math.floor(Math.random() * cellsInRow);\n\n      if (board[randomRow][randomCol] === 0) {\n        const numb = Math.random() < 0.9 ? 2 : 4;\n\n        board[randomRow][randomCol] = numb;\n        setCells();\n        break;\n      }\n    }\n\n    movesLeft = false;\n  } else if (!hasEmptyTile() && loseTheGame()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  movesLeft = true;\n}\n\nfunction startTheGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  scoreCount = 0;\n  gameScore.innerText = scoreCount;\n\n  setCells();\n  placeTiles();\n  placeTiles();\n  movesLeft = true;\n}\n\nfunction loseTheGame() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow - 1; c++) {\n      if (board[r][c] === board[r][c + 1] || board[c][r] === board[c + 1][r]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction setCells() {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      const currentCell = gameField.rows[r].cells[c];\n      const num = board[r][c];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.classList.add('field-cell');\n\n      if (num > 0) {\n        currentCell.innerText = num;\n        currentCell.classList.add(`field-cell--${num}`);\n      }\n\n      if (num === 2048) {\n        messageWin.classList.remove('hidden');\n        startButton.classList.replace('restart', 'start');\n      }\n    }\n  }\n\n  if (loseTheGame()) {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n  }\n}\n\nfunction removeEmptyTiles(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let newRow = removeEmptyTiles(row);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      scoreCount += newRow[i];\n\n      gameScore.innerText = scoreCount;\n    }\n  }\n\n  newRow = removeEmptyTiles(newRow);\n\n  while (newRow.length < cellsInRow) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction slideLeft() {\n  const prevBoard = cloneBoard(board);\n\n  for (let r = 0; r < cellsInRow; r++) {\n    board[r] = slide(board[r]);\n  }\n  movesLeft = !isBoardEqual(board, prevBoard);\n}\n\nfunction slideRight() {\n  const prevBoard = cloneBoard(board);\n\n  for (let r = 0; r < cellsInRow; r++) {\n    board[r] = slide(board[r].reverse()).reverse();\n  }\n  movesLeft = !isBoardEqual(board, prevBoard);\n}\n\nfunction slideUp() {\n  const prevBoard = cloneBoard(board);\n\n  for (let c = 0; c < cellsInRow; c++) {\n    const column = [board[0][c], board[1][c], board[2][c], board[3][c]];\n    const newColumn = slide(column);\n\n    for (let r = 0; r < cellsInRow; r++) {\n      board[r][c] = newColumn[r];\n    }\n  }\n  movesLeft = !isBoardEqual(board, prevBoard);\n}\n\nfunction slideDown() {\n  const prevBoard = cloneBoard(board);\n\n  for (let c = 0; c < cellsInRow; c++) {\n    const column = [\n      board[0][c],\n      board[1][c],\n      board[2][c],\n      board[3][c],\n    ].reverse();\n    const newColumn = slide(column).reverse();\n\n    for (let r = 0; r < cellsInRow; r++) {\n      board[r][c] = newColumn[r];\n    }\n  }\n  movesLeft = !isBoardEqual(board, prevBoard);\n}\n\nfunction cloneBoard(boardCopy) {\n  return boardCopy.map(row => row.slice());\n}\n\nfunction isBoardEqual(board1, board2) {\n  for (let r = 0; r < cellsInRow; r++) {\n    for (let c = 0; c < cellsInRow; c++) {\n      if (board1[r][c] !== board2[r][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\ndocument.addEventListener('keyup', (e) => {\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n\n    case 'ArrowRight':\n      slideRight();\n      break;\n\n    case 'ArrowUp':\n      slideUp();\n      break;\n\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n\n  placeTiles();\n  setCells();\n});\n"]}